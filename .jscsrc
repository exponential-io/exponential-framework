{
    "requireCurlyBraces": [
        "if",
        "else",
        "for",
        "while",
        "do",
        "try",
        "catch",
        "case",
        "default"
    ],

    "requireSpaceAfterKeywords": [
        "if",
        "else",
        "for",
        "while",
        "do",
        "switch",
        "return",
        "try",
        "catch"
    ],

    "disallowSpaceAfterKeywords": [],

    // Should be included in >= 1.3.1
    "requireSpaceBeforeBlockStatements": true,

    "requireParenthesesAroundIIFE": true,

    "requireSpacesInFunctionExpression": {
        //"beforeOpeningRoundBrace": true,
        "beforeOpeningCurlyBrace": true
    },

    "disallowSpacesInFunctionExpression": {
        "beforeOpeningRoundBrace": true
        //"beforeOpeningCurlyBrace": true
    },

    "requireSpacesInAnonymousFunctionExpression": {
        //"beforeOpeningRoundBrace": true,
        "beforeOpeningCurlyBrace": true
    },

    "disallowSpacesInAnonymousFunctionExpression": {
        "beforeOpeningRoundBrace": true
        //"beforeOpeningCurlyBrace": true
    },

    "requireSpacesInNamedFunctionExpression": {
        //"beforeOpeningRoundBrace": true,
        "beforeOpeningCurlyBrace": true
    },

    "disallowSpacesInNamedFunctionExpression": {
        "beforeOpeningRoundBrace": true
        //"beforeOpeningCurlyBrace": true
    },

    "requireSpacesInFunctionDeclaration": {
        //"beforeOpeningRoundBrace": true,
        "beforeOpeningCurlyBrace": true
    },

    "disallowSpacesInFunctionDeclaration": {
        "beforeOpeningRoundBrace": true
        //"beforeOpeningCurlyBrace": true
    },

    // Do not use this option as there are situations where consecutive
    // variable declarations are easier to read with multiple var keywords
    //"requireMultipleVarDecl": true,

    "requireBlocksOnNewline": true,

    // Not supported as of 2014.04.12 in master branch, but is in README
    //"disallowPaddingNewlinesInBlock": true

    "disallowEmptyBlocks": true,

    "disallowSpacesInsideObjectBrackets": true,

    "disallowSpacesInsideArrayBrackets": true,

    "disallowQuotedKeysInObjects": true,

    // This is a good option but our code currently fails this check.
    //"disallowDanglingUnderscores": true,

    "disallowSpaceAfterObjectKeys": true,

    "requireCommaBeforeLineBreak": true,

    "requireOperatorBeforeLineBreak": [
        "?",
        "+",
        "-",
        "/",
        "*",
        "=",
        "==",
        "===",
        "!=",
        "!==",
        ">",
        ">=",
        "<",
        "<="
    ],

    "requireSpaceBeforeBinaryOperators": [
        "?",
        "+",
        "-",
        "/",
        "*",
        "=",
        "==",
        "===",
        "!=",
        "!==",
        ">",
        ">=",
        "<",
        "<="
    ],

    "disallowSpaceAfterBinaryOperators": [
        "!"
    ],

    "requireSpaceAfterBinaryOperators": [
        "?",
        "+",
        "/",
        "*",
        ":",
        "=",
        "==",
        "===",
        "!=",
        "!==",
        ">",
        ">=",
        "<",
        "<="
    ],

    "disallowSpaceBeforeBinaryOperators": [
        ","
    ],

    "disallowSpaceAfterPrefixUnaryOperators": [
        "++",
        "--",
        "+",
        "-",
        "~",
        "!"
    ],

    "disallowSpaceBeforePostfixUnaryOperators": [
        "++",
        "--"
    ],

    "requireSpaceBeforeBinaryOperators": [
        "+",
        "-",
        "/",
        "*",
        "=",
        "==",
        "===",
        "!=",
        "!=="
    ],

    "requireSpaceAfterBinaryOperators": [
        "+",
        "-",
        "/",
        "*",
        "=",
        "==",
        "===",
        "!=",
        "!=="
    ],

    "disallowImplicitTypeConversion": [
        "numeric",
        "boolean",
        "binary",
        "string"
    ],

    "requireCamelCaseOrUpperCaseIdentifiers": true,

    "disallowMultipleLineStrings": true,

    "disallowMultipleLineBreaks": true,

    "validateLineBreaks": "LF",

    "validateQuoteMarks": {
        "mark": "'",
        "escape": true
    },

    "validateIndentation": 4,

    "disallowMixedSpacesAndTabs": true,

    "disallowTrailingWhitespace": true,

    "disallowTrailingComma": true,

    "disallowKeywordsOnNewLine": [
        "else"
    ],

    "requireLineFeedAtFileEnd": true,

    // The goal is to keep lines at 80 characters, but exit in error if a line
    // has over 120 characters. 80 chars is enforced via code reviews.
    "maximumLineLength": 120,

    "requireCapitalizedConstructors": true,

    // var that = this; Use `that` and not `self` as `self` is an in-built
    // keyword in the browser
    "safeContextKeyword": [
        "that"
    ],

    "requireDotNotation": true,

    "disallowYodaConditions": true,

    "validateJSDoc": {
        "checkParamNames": true,
        "checkRedundantParams": true,
        "requireParamTypes": true
    },

    // `server/models/user.js` is a temporary ignore until I have time to
    // change the field name from hashed_password to hashedPassword in MongoDB.
    "excludeFiles": [
        "node_modules/**",
        "client/bower_components/**",
        "server/models/user.js"
    ]
}
